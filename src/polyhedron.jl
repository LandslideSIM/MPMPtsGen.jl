#==========================================================================================+
|        MaterialPointGenerator.jl: Generate structured material particles in Julia        |
+------------------------------------------------------------------------------------------+
|  File Name  : polyhedron.jl                                                              |
|  Description: Generate structured mesh in 3D space by a given polyhedron                 |
|  Programmer : Zenan Huo                                                                  |
|  Start Date : 01/01/2022                                                                 |
|  Affiliation: Risk Group, UNIL-ISTE                                                      |
|  Functions  : 01. readmsh                                                                |
|               02. polyhedron2particle                                                    |
|               03. trimesh_voxelize                                                       |
+==========================================================================================#

export polyhedron2particle

"""
    readmsh(msh_path::String; precision="FP32")

Description:
---
Read the mesh file (`.msh`) generated by Gmsh. The function will return the vertices and 
faces for triangle. It's necessary to check the mesh qulity before using this function. 
You can do it in MeshLab or Gmsh GUI. `precision` can be "FP64" or "FP32" in `String`.
"""
function readmsh(msh_path; precision="FP32")
    T1 = precision == "FP32" ?   Int32 :   Int64
    T2 = precision == "FP32" ? Float32 : Float64
    # launch gmsh and load msh file
    gmsh.initialize()
    gmsh.option.setNumber("General.Terminal", 0)
    gmsh.open(msh_path)
    # get mesh data
    node_tags, node_coords, _ = gmsh.model.mesh.getNodes()
    num_nodes = length(node_tags)
    vertices = reshape(node_coords, 3, num_nodes)'
    element_types, element_tags, element_node_tags = gmsh.model.mesh.getElements()
    boundary = gmsh.model.getBoundary([], true, true, true)
    isempty(boundary) || error("3D object mesh is not closed.")
    gmsh.finalize()
    # generate vertices and faces in julia array
    triangle_type = 2
    triangle_index = findfirst(==(triangle_type), element_types)
    isnothing(triangle_index) && error("No triangles found in the mesh.")
    triangle_node_tags = element_node_tags[triangle_index]
    num_triangles = length(triangle_node_tags) รท 3
    faces = reshape(T1.(triangle_node_tags), 3, num_triangles)'
    return Array{T2, 2}(vertices), Array{T1, 2}(faces)
end

"""
    polyhedron2particle(stl_file::String, output_file, lp; verbose::Bool=false)

Description:
---
Convert a polyhedron (`.stl`) to a set of particles. The function will write the populated 
particles of each voxel into a `.xyz` file. The voxel size is defined by `lp`, it is suggest
to be equal to the MPM background grid size. The `verbose` is a flag to show the time 
consumption of each step.

Example:
---
```julia
polyhedron2particle("/path/to/yout/model.stl", "/path/to/model.xyz", 0.1, verbose=true)
```
"""
function polyhedron2particle(stl_file::String, output_file::String, lp; verbose::Bool=false)
    pts, tp = trimesh_voxelize3D(stl_file, lp)
    t4 = @elapsed np[].savetxt(output_file, pts, fmt="%.6f", delimiter=" ")
    if verbose
        t1, t2, t3 = tp[1], tp[2], tp[3]
        tt = sum(tp) + t4
        @info """voxelization with trimesh
        - load model  : $(@sprintf("%6.2f", t1)) s | $(@sprintf("%6.2f", 100*t1/tt))%
        - voxelize    : $(@sprintf("%6.2f", t2)) s | $(@sprintf("%6.2f", 100*t2/tt))%
        - fill voxels : $(@sprintf("%6.2f", t3)) s | $(@sprintf("%6.2f", 100*t3/tt))%
        - write .xyz  : $(@sprintf("%6.2f", t4)) s | $(@sprintf("%6.2f", 100*t4/tt))%
        $("-"^34)
        - total time  : $(@sprintf("%6.2f", tt)) s
        """
    end
    return nothing
end

"""
    trimesh_voxelize3D(stl_file::String, lp)

Description:
---
Voxelize the given STL model with the trimesh package. The voxel size is defined by `lp`.
"""
function trimesh_voxelize3D(stl_file::String, lp)
    lp > 0 || throw(ArgumentError("lp must be positive"))
    
    t1 = @elapsed begin
        mesh = trimesh[].load(stl_file, process=true)
        @info "STL model loaded"
    end

    t2 = @elapsed begin
        voxelized = voxelize(mesh, lp)
        offset = lp * 0.25
        voxelized_filled = voxelized.fill()
        pts_center = voxelized_filled.points
        @info "voxelized with trimesh"
    end

    t3 = @elapsed begin
        offsets = np[].array([[-offset,  offset,  offset], [-offset, -offset,  offset],
                              [ offset,  offset,  offset], [ offset, -offset,  offset],
                              [-offset,  offset, -offset], [-offset, -offset, -offset],
                              [ offset,  offset, -offset], [ offset, -offset, -offset]])
        pts = np[].vstack([np[].add(pts_center, offset) for offset in offsets])
        pts_num = pyconvert(Int, pts.shape[0])
        @info "filled with $(pts_num) particles"
    end
    return pts, [t1, t2, t3]
end