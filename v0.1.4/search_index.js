var documenterSearchIndex = {"docs":
[{"location":"example/DEM/#DEN","page":"DEN","title":"DEN","text":"","category":"section"},{"location":"example/polyhedron/#Polyhedron","page":"Polyhedron","title":"Polyhedron","text":"","category":"section"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Simple-Mesh","page":"API","title":"Simple Mesh","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"meshbuilder","category":"page"},{"location":"api/#MaterialPointGenerator.meshbuilder","page":"API","title":"MaterialPointGenerator.meshbuilder","text":"meshbuilder(x::T, y::T) where T <: AbstractRange\n\nDescription:\n\nGenerate structured mesh in 2D space.\n\n\n\n\n\nmeshbuilder(x::T, y::T, z::T) where T <: AbstractRange\n\nDescription:\n\nGenerate structured mesh in 3D space.\n\n\n\n\n\n","category":"function"},{"location":"api/#Polygon","page":"API","title":"Polygon","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"particle_in_polygon\npolygon2particle","category":"page"},{"location":"api/#MaterialPointGenerator.particle_in_polygon","page":"API","title":"MaterialPointGenerator.particle_in_polygon","text":"particle_in_polygon(px, py, polygon)\n\nDescription:\n\nDetermine whether a point is inside a polygon. Note the vertices of the polygon should be       ordered in a counterclockwise manner; otherwise, it may lead to incorrect results.  \n\n(This function is generated by ChatGPT 4o - 2024.10.10)\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.polygon2particle","page":"API","title":"MaterialPointGenerator.polygon2particle","text":"polygon2particle(domain, lpx, lpy)\n\nDescription:\n\nGenerate structured particles from a given polygon. Note the vertices of the polygon should  be ordered in a counterclockwise manner; otherwise, it may lead to incorrect results.  \n\nlpx and lpy are the space of particles in x and y directions, respectively.\n\ndomain is the polygon, for example, domain = [0 0; 2 0; 2 1; 0 1] means generate structured particles in a rectangle area.\n\n\n\n\n\n","category":"function"},{"location":"api/#Polyhedron","page":"API","title":"Polyhedron","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"polyhedron2particle\nMaterialPointGenerator.particle_in_polyhedron!\nMaterialPointGenerator.gmsh_mesh3D","category":"page"},{"location":"api/#MaterialPointGenerator.polyhedron2particle","page":"API","title":"MaterialPointGenerator.polyhedron2particle","text":"polyhedron2particle(msh_path::String, lpx, lpy, lpz, ::Val{:CPU})\n\nDescription:\n\nGenerate structured particles from a given polyhedron. Please provide .msh file that  generated by Gmsh GUI/Script.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.particle_in_polyhedron!","page":"API","title":"MaterialPointGenerator.particle_in_polyhedron!","text":"particle_in_polyhedron!(pts, node, tet, results)\n\nDescription:\n\nDetermine whether a point is inside a polyhedron. This function is able to run on any      hardware backends, so the input need to preallocate the results array. Users should not     call this function directly, please check polyhedron2particle.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.gmsh_mesh3D","page":"API","title":"MaterialPointGenerator.gmsh_mesh3D","text":"gmsh_mesh3D(msh_path::String)\n\nDescription:\n\nGenerate 3D mesh using Gmsh.\n\n\n\n\n\n","category":"function"},{"location":"api/#DEM","page":"API","title":"DEM","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"dem2particle\nrasterizeDEM\nMaterialPointGenerator.IDW!","category":"page"},{"location":"api/#MaterialPointGenerator.dem2particle","page":"API","title":"MaterialPointGenerator.dem2particle","text":"dem2particle(dem, lpz, bottom)\n\nDescription:\n\nGenerate particles from a given DEM file. dem is a coordinates Array with three columns  (x, y, z). lpz is the space of particles in z direction. bottom is a Float64 value, which means the plane z = bottom.\n\n\n\n\n\ndem2particle(dem, lpz, bottom_surf)\n\nDescription:\n\nGenerate particles from a given DEM file and a bottom surface file. dem is a coordinates  Array with three columns (x, y, z). bottom_surf is a coordinates Array with three columns, but it should have the same x and y coordinates as the DEM, and the z value should be lower than the DEM. lpz is the space of particles in z direction.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.rasterizeDEM","page":"API","title":"MaterialPointGenerator.rasterizeDEM","text":"rasterizeDEM(lpx, lpy, dem; k=10, p=2, trimbounds=[0.0 0.0], dembounds=[0.0, 0.0])\n\nDescription:\n\nRasterize the DEM file to generate particles. lpx and lpy are the space of particles in x and y directions. dem is a coordinates Array with three columns (x, y, z). k is  the number of nearest neighbors (10 by default), p is the power parameter (2 by default),  trimbounds is the boundary of the particles, dembounds is the boundary of the DEM.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.IDW!","page":"API","title":"MaterialPointGenerator.IDW!","text":"IDW!(k, p, dem, idxs, ptslist, tree)\n\nDescription:\n\nInverse Distance Weighting (IDW) interpolation method. k is the number of nearest  neighbors, p is the power parameter, dem is a coordinates Array with three columns  (x, y, z), idxs is the index of the nearest neighbors, ptslist is the coordinates  Array of the particles, tree is the KDTree of the DEM.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"savexyz\nreadxyz\nsortbycol","category":"page"},{"location":"api/#MaterialPointGenerator.savexyz","page":"API","title":"MaterialPointGenerator.savexyz","text":"savexyz(file_dir::P, pts::T) where {P <: String, T <: Array{Float64, 2}}\n\nDescription:\n\nSave the points pts to the xyz file file_dir.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.readxyz","page":"API","title":"MaterialPointGenerator.readxyz","text":"readxyz(file_dir::P) where P <: String\n\nDescription:\n\nRead the xyz file from file_dir.\n\n\n\n\n\n","category":"function"},{"location":"api/#MaterialPointGenerator.sortbycol","page":"API","title":"MaterialPointGenerator.sortbycol","text":"sortbycol(pts, col::T) where T <: Int\n\nDescription:\n\nSort the points in pts according to the column col.\n\n\n\n\n\n","category":"function"},{"location":"workflow/simple_mesh/#Simple-Mesh","page":"Simple Mesh","title":"Simple Mesh","text":"","category":"section"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"Here, we consider generating rectangular domain nodes (2D) and cuboidal domain nodes (3D) by controlling the starting range and step size in each direction.","category":"page"},{"location":"workflow/simple_mesh/#2D","page":"Simple Mesh","title":"2D","text":"","category":"section"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"Consider a rectangular area where the range in the x-direction is from 0 to 10 and in the  y-direction from 0 to 6. The step size in the x-direction is 1, and in the y-direction, it  is 2. Therefore, we can do:","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"pts = meshbuilder(0.0 : 1.0 : 10.0, 0.0: 2.0 : 6.0)","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"This way, we can obtain the results shown in the figure. The variable pts is an array  where the first column contains the x-coordinates of all the nodes, and the second column  contains the corresponding y-coordinates.","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"(Image: Figure1)","category":"page"},{"location":"workflow/simple_mesh/#3D","page":"Simple Mesh","title":"3D","text":"","category":"section"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"pts = meshbuilder(0.0 : 1.0 : 10.0, 0.0: 2.0 : 6.0, 0.0 : 2.0 : 4.0)","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"MaterialPointGenerator.jl提供了一个非常便利的函数来导出三维点集以方便可视化:","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"savexyz(output_dir, pts)","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"其中output_dir您想要导出的路, pts是三维点集，我们可以设置为：","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"savexyz(joinpath(homedir(), \"tmp.xyz\"), pts)","category":"page"},{"location":"workflow/simple_mesh/","page":"Simple Mesh","title":"Simple Mesh","text":"(Image: Figure2)","category":"page"},{"location":"example/polygon/#Polygon","page":"Polygon","title":"Polygon","text":"","category":"section"},{"location":"workflow/DEM/#DEM","page":"DEM","title":"DEM","text":"","category":"section"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"note: Note\nHere we assume that the DEM file only includes the three-dimensional coordinates of points.  The input format for the DEM is a three-column array, where the first column represents the x-coordinate, the second column represents the corresponding y-coordinate, and the third  column is the z-coordinate.","category":"page"},{"location":"workflow/DEM/#DEM-with-a-flat-bottom-surface","page":"DEM","title":"DEM with a flat bottom surface","text":"","category":"section"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"假设我们有了一个DEM文件，然后想以底面，例如z=0这个平面对这个DEM模型闭合，那么可以做：","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"pts = dem2particle(dem, lpz, bottom)","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"其中dem是拥有三列的数组，lpz是沿z方向布置物质点时的步长，bottom是一个标量值，表示底平面z的高度。","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"pts = dem2particle(dem, 0.1, 0)\nsavexyz(joinpath(homedir(), \"tmp.xyz\"), pts)","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"(Image: Figure3)","category":"page"},{"location":"workflow/DEM/#DEM-with-a-given-bottom-surface","page":"DEM","title":"DEM with a given bottom surface","text":"","category":"section"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"如果说用来闭合DEM1的底面并不是一个平面，那么我们可以指定另一个DEM2文件作为用来闭合DEM1的底面。","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"pts = dem2particle(dem, lpz, bottom_surf)","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"warning: Warning\nDEM2与DEM1应该在x-y平面具有完全相同的坐标。这可以通过rasterizeDEM来实现。","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"例如：","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"pts = dem2particle(dem, 0.1, bottom_surf)\nsavexyz(joinpath(homedir(), \"tmp.xyz\"), pts)","category":"page"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"(Image: Figure4)","category":"page"},{"location":"workflow/DEM/#DEM-interpolation","page":"DEM","title":"DEM interpolation","text":"","category":"section"},{"location":"workflow/DEM/","page":"DEM","title":"DEM","text":"这里的插值是指DEM中的点集在x-y平面上进行插值，并根据相邻点的z坐标来计算对应的z值。有些时候滑坡的DEM文件可能在x-y平面并不是 一个矩形，因此我们可能需要对形状进行裁剪。","category":"page"},{"location":"workflow/DEM/#DEM为矩形","page":"DEM","title":"DEM为矩形","text":"","category":"section"},{"location":"workflow/DEM/#DEM非矩形","page":"DEM","title":"DEM非矩形","text":"","category":"section"},{"location":"#MaterialPointGenerator","page":"Home","title":"MaterialPointGenerator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is used for generating structured particles for Material Point Method (MPM) simulation. The current particle generation method using Gmsh modeling may require GPU acceleration. We have provided a backend-agnostic solution that supports switching between NVIDIA (CUDA), AMD (ROCm), Apple (Metal), and Intel (oneAPI). Please follow the documentation step-by-step to reproduce the results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation ⚙️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Just type ] in Julia's  REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@1.11) Pkg> add MaterialPointGenerator","category":"page"},{"location":"#Features","page":"Home","title":"Features ✨","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Structured (regular) coordinates\nSupport Gmsh for complicated 2/3D models\nBackend-agnostic functions supports\nParticle generation from a Digital Elevation Model (DEM) file  \nAutomatically interpolate DEM files with support for shape trimming.","category":"page"},{"location":"#Acknowledgement","page":"Home","title":"Acknowledgement 👍","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is sponserd by Risk Group | Université de Lausanne and China Scholarship Council [中国国家留学基金管理委员会].","category":"page"},{"location":"workflow/polyhedron/#Polyhedron","page":"Polyhedron","title":"Polyhedron","text":"","category":"section"},{"location":"workflow/polygon/#Polygon","page":"Polygon","title":"Polygon","text":"","category":"section"}]
}
